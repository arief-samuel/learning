@inject IJSRuntime JS
@implements IAsyncDisposable
@{
    var timeString = $"{Math.Floor(FractionOfDay * 10)}:{Math.Floor(FractionOfDay * 1_000) % 100:00}:{Math.Floor(FractionOfDay * 100_000) % 100:00}"; 
}

<h2>Decimal Clock</h2>

<div id="clock-face">
    @* Render 0-9 digits *@
    @for (int i = 0; i < 10; i++)
    {
        <div class="digit" style="
            left: @(50 - Math.Sin(Math.PI * i / 5) * 40)%;
            top: @(50 + Math.Cos(Math.PI * i / 5) * 40)%;
        ">@i</div>
    }

    @* Render ticks *@
    @for (int i = 0; i < 100; i++)
    {
        <div class="@(i % 10 == 0 ? "large tick" : "tick")" style="
            transform: rotate(@(i * 3.6)deg);
        "/>
    }

    <div id="short-hand" style="
        transform: rotate(@(FractionOfDay * 360 + 180))deg;
    "/>

    <div id="long-hand" style="
        transform: rotate(@(Mod(FractionOfDay * 10, 1) * 360 + 180)deg);
    "/>

    <div id="second-hand" style="
        transform: rotate(@(Mod(FractionOfDay * 1000, 1) * 360 + 180)deg);
    "/>
</div>

<h1 id="clock-time">@timeString</h1>

@code {
    double FractionOfDay = DateTime.Now.TimeOfDay / TimeSpan.FromDays(1);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Call startRenderLoop in scripts.js to start requestAnimationFrame loop
        await JS.InvokeVoidAsync("startRenderLoop", DotNetObjectReference.Create(this));
    }

    public async ValueTask DisposeAsync()
    {
        // Call stopRenderLoop in scripts.js to stop requestAnimationFrame loop
        await JS.InvokeVoidAsync("stopRenderLoop");
    }

    // Callback method to be called from render method in scripts.js
    [JSInvokable]
    public void Render()
    {
        FractionOfDay = DateTime.Now.TimeOfDay / TimeSpan.FromDays(1);
        StateHasChanged();
    }

    // C# can't mod two double values
    static double Mod(double a, double b) => a - Math.Floor(a / b) * b;
}